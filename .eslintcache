[{"C:\\Users\\user\\Desktop\\dwitter\\src\\index.js":"1","C:\\Users\\user\\Desktop\\dwitter\\src\\components\\App.js":"2","C:\\Users\\user\\Desktop\\dwitter\\src\\components\\Router.js":"3","C:\\Users\\user\\Desktop\\dwitter\\src\\routes\\Home.js":"4","C:\\Users\\user\\Desktop\\dwitter\\src\\mybase.js":"5","C:\\Users\\user\\Desktop\\dwitter\\src\\components\\Navigation.js":"6","C:\\Users\\user\\Desktop\\dwitter\\src\\routes\\Profile.js":"7","C:\\Users\\user\\Desktop\\dwitter\\src\\components\\Dwitte.js":"8","C:\\Users\\user\\Desktop\\dwitter\\src\\components\\DwitteFactory.js":"9","C:\\Users\\user\\Desktop\\dwitter\\src\\routes\\AuthForm.js":"10","C:\\Users\\user\\Desktop\\dwitter\\src\\components\\AuthWithSocial.js":"11"},{"size":235,"mtime":1609697373358,"results":"12","hashOfConfig":"13"},{"size":1429,"mtime":1611735529300,"results":"14","hashOfConfig":"13"},{"size":871,"mtime":1610015590675,"results":"15","hashOfConfig":"13"},{"size":890,"mtime":1611733365282,"results":"16","hashOfConfig":"13"},{"size":657,"mtime":1609834381061,"results":"17","hashOfConfig":"13"},{"size":837,"mtime":1611731524292,"results":"18","hashOfConfig":"13"},{"size":2022,"mtime":1611733896438,"results":"19","hashOfConfig":"13"},{"size":2452,"mtime":1611732416328,"results":"20","hashOfConfig":"13"},{"size":2668,"mtime":1611732941631,"results":"21","hashOfConfig":"13"},{"size":2941,"mtime":1611735500126,"results":"22","hashOfConfig":"13"},{"size":1026,"mtime":1611723591668,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"snwlns",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"27"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"27"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"27"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"C:\\Users\\user\\Desktop\\dwitter\\src\\index.js",["52"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"components/App\";\nimport mybase from \"mybase\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n",["53","54"],"C:\\Users\\user\\Desktop\\dwitter\\src\\components\\App.js",[],"C:\\Users\\user\\Desktop\\dwitter\\src\\components\\Router.js",[],"C:\\Users\\user\\Desktop\\dwitter\\src\\routes\\Home.js",[],"C:\\Users\\user\\Desktop\\dwitter\\src\\mybase.js",[],"C:\\Users\\user\\Desktop\\dwitter\\src\\components\\Navigation.js",["55"],"import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"components/CSS/style_Main.css\";\nimport { HiOutlineCog } from \"react-icons/hi\";\n\nconst Navigation = ({ userObj }) => {\n  const [displayName, setDisplayName] = useState(\"username\");\n  useEffect(() => {\n    if (userObj.displayName) {\n      setDisplayName(userObj.displayName);\n    }\n  });\n  return (\n    <nav>\n      <div className=\"nav-container\">\n        <h5 className=\"home-link\">\n          <Link to=\"/\" className=\"link\">\n            Home\n          </Link>\n        </h5>\n        <h5 className=\"profile-link\">\n          <HiOutlineCog className=\"gear-icon\" />\n          <Link to=\"/profile\" className=\"link profile-name\">\n            {displayName}\n          </Link>\n        </h5>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","C:\\Users\\user\\Desktop\\dwitter\\src\\routes\\Profile.js",["56"],"import { AuthService, DBService } from \"mybase\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Dwitte from \"components/Dwitte\";\n\nconst Profile = ({ userObj, refreshUserObj }) => {\n  const history = useHistory();\n  const [dwitteArray, setDwitteArray] = useState([]);\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n  const onLogoutClick = () => {\n    AuthService.signOut();\n    history.push(\"/\");\n  };\n\n  const getMyDwittes = async () => {\n    const dwittes = await DBService.collection(\"dwitte\")\n      .where(\"creatorId\", \"==\", userObj.uid)\n      .orderBy(\"createdAt\")\n      .get();\n    const dwitteArray = dwittes.docs.map((doc) => doc.data());\n    setDwitteArray(dwitteArray);\n  };\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    if (userObj.displayName !== newDisplayName) {\n      await userObj.updateProfile({\n        displayName: newDisplayName,\n      });\n      refreshUserObj(newDisplayName);\n    }\n  };\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewDisplayName(value);\n  };\n\n  useEffect(() => {\n    getMyDwittes();\n  }, []);\n\n  return (\n    <>\n      <div className=\"dummy\"></div>\n      <form onSubmit={onSubmit} className=\"edit-profile-form\">\n        <input\n          type=\"text\"\n          value={newDisplayName}\n          placeholder=\"Display name\"\n          onChange={onChange}\n          className=\"new-username-input\"\n        />\n        <button type=\"submit\" className=\"submit-username\">\n          수정\n        </button>\n        <button onClick={onLogoutClick} className=\"logout\">\n          logout\n        </button>\n      </form>\n      <div className=\"dwitte-container\">\n        {dwitteArray &&\n          dwitteArray.map((dw) => (\n            <Dwitte\n              key={dw.createdAt}\n              dwitteObj={dw}\n              isOwner={dw.creatorId === userObj.uid}\n            />\n          ))}\n      </div>\n    </>\n  );\n};\n\nexport default Profile;\n","C:\\Users\\user\\Desktop\\dwitter\\src\\components\\Dwitte.js",["57"],"import { DBService, storageService } from \"mybase\";\nimport React, { useState } from \"react\";\nimport { BsFillTrashFill, BsPencilSquare } from \"react-icons/bs\";\nimport { ImCancelCircle, ImCheckmark } from \"react-icons/im\";\n\nconst Dwitte = ({ dwitteObj, isOwner, userName }) => {\n  const [editing, setEditing] = useState(false);\n  const [newDwitte, setNewDwitte] = useState(dwitteObj.text);\n\n  const onDeleteClick = async () => {\n    const ok = window.confirm(\"Are you sure?\");\n    if (ok) {\n      await DBService.doc(`dwitte/${dwitteObj.id}`).delete();\n      await storageService.refFromURL(dwitteObj.attachmentURL).delete();\n    }\n  };\n\n  const toggleEditing = () => {\n    setEditing((prev) => !prev);\n  };\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    await DBService.doc(`dwitte/${dwitteObj.id}`).update({\n      text: newDwitte,\n    });\n    setEditing(false);\n  };\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewDwitte(value);\n  };\n\n  return (\n    <div className=\"dwitte\">\n      {editing ? (\n        <>\n          <form onSubmit={onSubmit}>\n            <h4 className=\"username\">{dwitteObj.creatorName}</h4>\n            <input\n              type=\"text\"\n              placeholder=\"Edit your dwitte\"\n              value={newDwitte}\n              required\n              onChange={onChange}\n              className=\"new-dwitte-input\"\n            />\n            <button type=\"submit\" className=\"submit-new-dwitte\">\n              <ImCheckmark />\n            </button>\n          </form>\n          <button onClick={toggleEditing} className=\"cancel-editing\">\n            <ImCancelCircle />\n          </button>\n        </>\n      ) : (\n        <>\n          <h4 className=\"username\">{dwitteObj.creatorName}</h4>\n          <h4 className=\"dwitte-text\">{dwitteObj.text}</h4>\n          {dwitteObj.attachmentURL && (\n            <img\n              src={dwitteObj.attachmentURL}\n              width=\"110px\"\n              height=\"110px\"\n              className=\"dwitte-image\"\n            />\n          )}\n          {isOwner && (\n            <>\n              <button onClick={onDeleteClick} className=\"delete-dwitte\">\n                <BsFillTrashFill />\n              </button>\n              <button onClick={toggleEditing} className=\"edit-dwitte\">\n                <BsPencilSquare />\n              </button>\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Dwitte;\n","C:\\Users\\user\\Desktop\\dwitter\\src\\components\\DwitteFactory.js",["58","59"],"import React, { useState } from \"react\";\nimport { storageService, DBService } from \"mybase\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { MdAddAPhoto } from \"react-icons/md\";\n\nconst DwitteFactory = ({ userObj }) => {\n  const [dwitte, setDwitte] = useState(\"\");\n  const [attachment, setAttachment] = useState(\"\");\n  const [errorMsg, setErrorMsg] = useState(\"\");\n\n  const onFileChange = (event) => {\n    const {\n      target: { files },\n    } = event;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.readAsDataURL(theFile);\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setAttachment(result);\n    };\n  };\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setDwitte(value);\n  };\n\n  const onSubmit = async (event) => {\n    if (dwitte !== \"\") {\n      event.preventDefault();\n      let attachmentURL = \"\";\n      if (attachment != \"\") {\n        const attachmentRef = storageService\n          .ref()\n          .child(`${userObj.uid}/${uuidv4()}`);\n        const response = await attachmentRef.putString(attachment, \"data_url\");\n        attachmentURL = await response.ref.getDownloadURL();\n      }\n      const dwitteObj = {\n        text: dwitte,\n        createdAt: Date.now(),\n        creatorId: userObj.uid,\n        creatorName: userObj.displayName,\n        attachmentURL,\n      };\n      await DBService.collection(\"dwitte\").add(dwitteObj);\n      setDwitte(\"\");\n      setAttachment(\"\");\n      setErrorMsg(\"\");\n    } else {\n      setErrorMsg(\"no dwitte!\");\n    }\n  };\n\n  const onClearAttachmentClick = () => {\n    setAttachment(null);\n  };\n\n  return (\n    <form onSubmit={onSubmit} className=\"dwitte-form\">\n      <input\n        value={dwitte}\n        onChange={onChange}\n        type=\"text\"\n        placeholder=\"What's your mind?\"\n        maxLength={120}\n        className=\"dwitte-input\"\n      />\n      <input type=\"submit\" value=\"dwitte\" className=\"submit-dwitte\" />\n      <label for=\"fileInput\" className=\"file-upload-btn\">\n        <MdAddAPhoto />\n      </label>\n      <p className=\"dwitte-error-msg\">{errorMsg}</p>\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={onFileChange}\n        id=\"fileInput\"\n        className=\"file-input\"\n      />\n      {attachment && (\n        <>\n          <img\n            src={attachment}\n            width=\"50px\"\n            height=\"50px\"\n            className=\"attach-img\"\n          />\n          <button onClick={onClearAttachmentClick} className=\"delete-img\">\n            X\n          </button>\n        </>\n      )}\n    </form>\n  );\n};\n\nexport default DwitteFactory;\n","C:\\Users\\user\\Desktop\\dwitter\\src\\routes\\AuthForm.js",[],"C:\\Users\\user\\Desktop\\dwitter\\src\\components\\AuthWithSocial.js",[],{"ruleId":"60","severity":1,"message":"61","line":4,"column":8,"nodeType":"62","messageId":"63","endLine":4,"endColumn":14},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":8,"column":3,"nodeType":"62","endLine":8,"endColumn":12,"suggestions":"70"},{"ruleId":"68","severity":1,"message":"71","line":43,"column":6,"nodeType":"72","endLine":43,"endColumn":8,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":64,"column":13,"nodeType":"76","endLine":69,"endColumn":15},{"ruleId":"77","severity":1,"message":"78","line":37,"column":22,"nodeType":"79","messageId":"80","endLine":37,"endColumn":24},{"ruleId":"74","severity":1,"message":"75","line":88,"column":11,"nodeType":"76","endLine":93,"endColumn":13},"no-unused-vars","'mybase' is defined but never used.","Identifier","unusedVar","no-native-reassign",["81"],"no-negated-in-lhs",["82"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setDisplayName'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [userObj.displayName] as a second argument to the useEffect Hook.",["83"],"React Hook useEffect has a missing dependency: 'getMyDwittes'. Either include it or remove the dependency array.","ArrayExpression",["84"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},"Add dependencies array: [userObj.displayName]",{"range":"89","text":"90"},"Update the dependencies array to be: [getMyDwittes]",{"range":"91","text":"92"},[384,384],", [userObj.displayName]",[1188,1190],"[getMyDwittes]"]